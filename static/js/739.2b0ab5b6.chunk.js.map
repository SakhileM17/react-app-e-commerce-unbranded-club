{"version":3,"file":"static/js/739.2b0ab5b6.chunk.js","mappings":"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","sources":["components/Cart.js","redux/reducers/SelectQtyReducer.js","redux/reducers/checkoutReducer.js","redux/reducers/selectSizeReducer.js","utils/moneyformatter.js"],"sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux'; // Import connect\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useReducer,useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { moneyFormat } from '../utils/moneyformatter';\r\n\r\nimport selectedSizesReducer, {selectSize} from \"../redux/reducers/selectSizeReducer\";\r\nimport selectedQtyReducer, {selectQty} from \"../redux/reducers/SelectQtyReducer\";\r\nimport { updateQuantity } from '../redux/reducers/cartReducer';\r\n\r\nimport { removeFromCart } from '../redux/reducers/cartReducer';\r\nimport { clearCart } from '../redux/reducers/cartReducer';\r\n\r\nimport { addToCheckOut } from '../redux/reducers/checkoutReducer';\r\n\r\nimport UnbrandedClubLogoBlack from '../assets/unbrandedClubLogoBlack.png' // summer/winter collection images\r\n\r\n\r\nconst Cart = ({ cartItems , removeFromCart, clearCart, selectQty, totalPrice, addToCheckOut, updateQuantity}) => {\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (event) => {\r\n    \r\n    //\r\n    event.preventDefault();\r\n    //\r\n    navigate(\"/checkout\", { state: { cartItems } }); // Navigate to the checkout route\r\n    \r\n  };\r\n\r\n  // Remove item from cart\r\n  const handleRemoveItem = (event, item) => {\r\n\r\n    event.preventDefault()\r\n\r\n    removeFromCart(item);\r\n\r\n  }\r\n\r\n  // Clear whole cart\r\n  const handleClearCart = () => {\r\n\r\n    clearCart();\r\n  }\r\n\r\n  \r\n  //\r\n  const handleQtyChange = (itemId, event) => {\r\n    const newQuantity = parseInt(event.target.value);\r\n    updateQuantity(itemId, newQuantity);\r\n  };\r\n\r\n  const navigateToShop = () => {\r\n\r\n    navigate('/shop')\r\n\r\n  }\r\n  \r\n    \r\n  return (\r\n\r\n    <div className='cart-main-container'>\r\n\r\n      <div className='cart-container'>\r\n\r\n        <div className='cart-header-container'>\r\n\r\n          <div className='cart-header'>\r\n\r\n            <h1>My shopping cart</h1>\r\n          </div>\r\n\r\n          <div className='cart-header'>\r\n            <img  src={UnbrandedClubLogoBlack} alt=\"unbranded-club-logo black\"/>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        \r\n        \r\n        <div className='cart-production-description'>\r\n\r\n          <form onSubmit={handleSubmit}>\r\n            \r\n            <div className=\"cart-product-container\">\r\n            \r\n\r\n            {cartItems && cartItems.length > 0 ? (\r\n\r\n              <div> \r\n\r\n              <ul>\r\n                {cartItems.map((item, index) => (\r\n                  <li key={index}>\r\n\r\n                    <div className='cart-customer-product-container'>\r\n\r\n                      <div className='cart-customer-product-image-container'>\r\n\r\n                       <img src={item.img} alt='' className='cart-product-image'/>\r\n\r\n                      </div>\r\n\r\n                      \r\n                      <div className='cart-customer-product-name-container'>\r\n\r\n                        <div>\r\n\r\n                          <p><strong>Unbranded Jogger {item.name}</strong></p>\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n\r\n                          <p>Price : {moneyFormat(item.price)}</p>\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n\r\n                          <p>Size : {item.size} - Qty :  \r\n\r\n                            <select value={item.qty} onChange={(event) => handleQtyChange(item.id, event)}>\r\n                              {[...Array(10)].map((_, i) => (\r\n                                <option key={i} value={i + 1}>{i + 1}</option>\r\n                              ))}\r\n                            </select>\r\n                          \r\n                          </p>\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n\r\n                          <p> <strong>Total Price : {moneyFormat(item.price * item.qty)}</strong></p>\r\n\r\n                        </div>\r\n\r\n                        \r\n\r\n                      \r\n                      </div>\r\n\r\n                      <div className='cart-customer-product-name-container'>\r\n\r\n                        {/* Remove item button */}\r\n                        <button onClick={(event) => handleRemoveItem(event, item)} className='button-remove-item'>Remove Item</button>\r\n\r\n                      </div>\r\n\r\n                    </div>\r\n\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n\r\n              <div className='cart-customer-total-container'>\r\n\r\n                <p>Total Price : {moneyFormat(totalPrice)} </p>\r\n\r\n              </div>\r\n              \r\n              <div className='cart-button-container'>\r\n\r\n                <div className='cart-button-CheckOut'>\r\n\r\n                  <button type='submit' className='cart-button-checkout'>CheckOut</button>\r\n\r\n                </div>\r\n\r\n                <div className='cart-button-CheckOut'>\r\n\r\n                  <button onClick={() => {handleClearCart()}} className='cart-button-clear'>Clear Cart</button>\r\n\r\n                </div>\r\n\r\n              </div>\r\n\r\n              </div>\r\n\r\n            ) : (\r\n\r\n              <div>\r\n\r\n                  <p>Your cart is empty</p>\r\n\r\n                  <button className='continue-shopping-button' onClick={navigateToShop}>Continuee Shopping</button>\r\n\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          </form>\r\n\r\n          \r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Map state to props to access cartItems from Redux store\r\nconst mapStateToProps = (state) => {\r\n\r\n  return {\r\n    \r\n    cartItems: state.cart.items,\r\n    totalPrice: state.cart.totalPrice // Map totalPrice from Redux store state\r\n\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n\r\n    //\r\n    removeFromCart: (item) => dispatch(removeFromCart(item)),\r\n\r\n    //\r\n    clearCart: () => {\r\n      \r\n      console.log(\"Clearing cart...\"); // Check if this log appears\r\n      dispatch(clearCart())\r\n    },\r\n\r\n    //\r\n    addToCheckOut: (item) => dispatch(addToCheckOut(item)),\r\n\r\n    //\r\n    selectQty: (index, qty) => dispatch(selectQty(index, qty)),\r\n\r\n    //\r\n    updateQuantity: (itemId, newQuantity) => dispatch(updateQuantity(itemId, newQuantity))\r\n\r\n  };\r\n};\r\n\r\n// Connect Cart component to Redux store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);\r\n","/* Reducer - To select Item size  */\r\nconst initialState = {}; // Initial state for selected sizes\r\n\r\nexport const SELECT_QTY = 'SELECT_QTY'\r\n\r\n// action \r\nexport const selectQty = (index,qty) => (\r\n    {\r\n      type: SELECT_QTY,\r\n      payload: {index, qty}\r\n    }\r\n  )\r\n\r\n  // reducer function\r\n  const selectedQtyReducer = (state =initialState, action) => {\r\n\r\n    switch(action.type) {\r\n  \r\n      case SELECT_QTY:\r\n        const {index, qty} = action.payload;\r\n        return {...state, [index] : qty};\r\n  \r\n        default:\r\n          return state\r\n  \r\n    }\r\n  }\r\n\r\n  export default selectedQtyReducer","// Action Types\r\nexport const ADD_TO_CHECKOUT = 'ADD_TO_CHECK_OUT'\r\nexport const CLEAR_CHECKOUT = 'CLEAR_CHECKOUT'\r\nexport const SAVE_ORDER_INFO = 'SAVE_ORDER_INFO';\r\nexport const SET_ORDER_INFO = 'SET_ORDER_INFO'\r\n\r\n\r\n// initial state for the checkout\r\nconst initialState = {\r\n\r\n    items : [], // Initialize with an empty array\r\n    totalDelivery : 0,\r\n    orderInfo: null, // Initial state for orderInfo\r\n\r\n};\r\n\r\n//Action creators\r\n\r\n// add items to checkout\r\nexport const addToCheckOut = (item) => {\r\n\r\n    return {\r\n\r\n        type: ADD_TO_CHECKOUT, \r\n        payload : item\r\n\r\n    }\r\n}\r\n\r\n// clear checkout list\r\nexport const clearCheckout = () => {\r\n\r\n    return {\r\n      type: CLEAR_CHECKOUT,\r\n    };\r\n\r\n  };\r\n\r\n  //\r\n  export const saveOrderInfo = (orderInfo) => {\r\n    return {\r\n      type: SAVE_ORDER_INFO,\r\n      payload: orderInfo,\r\n    };\r\n  };    \r\n\r\n  export const setOrderInfo = (orderInfo) => ({\r\n\r\n    type: SET_ORDER_INFO,\r\n    payload: orderInfo,\r\n  });\r\n\r\n  // Define a selector function to calculate total price\r\nexport const calculateDelivery = (totalPrice) => {\r\n\r\n    // Calculate total delivery based on totalPrice\r\n    const totalDelivery = totalPrice === 0 ? 0 : (totalPrice >= 500 ? 0 : 500);\r\n\r\n    return {\r\n\r\n        totalDelivery\r\n    }\r\n\r\n  };\r\n\r\n  // reducer function \r\nconst checkoutReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n  \r\n        case ADD_TO_CHECKOUT:\r\n            console.log(\"Adding item to checkout:\", action.payload);\r\n            return {\r\n                ...state,\r\n                items: [...state.items, action.payload]\r\n                \r\n            };\r\n        \r\n        case CLEAR_CHECKOUT: \r\n            console.log(\"Clearing checkout\");\r\n            return {\r\n                ...state,\r\n                items: [],\r\n                totalDelivery: 0, // Reset total delivery when clearing checkout\r\n            };\r\n        \r\n        case SAVE_ORDER_INFO:\r\n            console.log(\"Saving order info:\", action.payload);\r\n            return {\r\n                ...state,\r\n                orderInfo: action.payload,\r\n             };\r\n        \r\n             case SET_ORDER_INFO:\r\n            console.log(\"Setting order info:\", action.payload);\r\n            return {\r\n              ...state,\r\n              orderInfo: action.payload,\r\n            };\r\n  \r\n        default: \r\n            \r\n            return state\r\n    }\r\n  };\r\n  \r\n  export default checkoutReducer\r\n\r\n  // checkoutReducer.js\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  \r\n  \r\n\r\n\r\n","const initialState = {}; // Initial state for selected sizes\r\n\r\n/* constants */\r\nexport const SELECT_SIZE = 'SELECT_SIZE';\r\n\r\n\r\n// action\r\nexport const selectSize = (index, size) => ({\r\n\r\n  type: SELECT_SIZE,\r\n  payload: { index, size },\r\n\r\n});\r\n\r\n\r\nconst selectedSizesReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n\r\n    case SELECT_SIZE:\r\n      const { index, size } = action.payload;\r\n      return { ...state, [index]: size };\r\n\r\n    default:\r\n      return state;\r\n\r\n  }\r\n};\r\n\r\n\r\n\r\nexport  default selectedSizesReducer;","export const moneyFormat = (number) => {\r\n\r\n    const formatter = new Intl.NumberFormat('en-ZA', {\r\n      style: 'currency',\r\n      currency: 'ZAR',\r\n      minimumFractionDigits: 2, // Show at least 2 decimal places\r\n    });\r\n  \r\n    return formatter.format(number);\r\n  }"],"names":["connect","state","cartItems","cart","items","totalPrice","dispatch","removeFromCart","item","clearCart","console","log","addToCheckOut","selectQty","index","qty","updateQuantity","itemId","newQuantity","_ref","navigate","useNavigate","_jsx","className","children","_jsxs","src","UnbrandedClubLogoBlack","alt","onSubmit","event","preventDefault","length","map","img","name","moneyFormat","price","size","value","onChange","handleQtyChange","parseInt","target","id","Array","_","i","onClick","handleRemoveItem","type","navigateToShop","initialState","SELECT_QTY","payload","arguments","undefined","action","ADD_TO_CHECKOUT","SET_ORDER_INFO","setOrderInfo","orderInfo","calculateDelivery","totalDelivery","SELECT_SIZE","selectSize","number","Intl","NumberFormat","style","currency","minimumFractionDigits","format"],"sourceRoot":""}